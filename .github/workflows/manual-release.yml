name: "Manual release"
concurrency: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          Version string for the release.  
          Format: v1.2.3-suffix
        required: true
        type: string
env:
  VERSION: ${{ inputs.version }}
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_already_exists: ${{ steps.tag_check.outputs.exists }}
    steps:
      - name: Get build timestamp
        id: get-timestamp
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: "YYYY-MM-DD-HHmm"
      - name: Generate environmental variables
        id: generate_env_vars
        run: |
          echo "::set-output name=tag_name::bnme-${{ inputs.version }}"
          echo "::set-output name=release_name::BNME ${{ inputs.version }}"
      - name: Check if there is existing git tag
        id: tag_check
        uses: mukunku/tag-exists-action@v1.0.0
        with:
          tag: ${{ steps.generate_env_vars.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.generate_env_vars.outputs.tag_name }}
          tag_prefix: ""
      - uses: actions/checkout@v2
      - run: git fetch origin tag ${{ steps.generate_env_vars.outputs.tag_name }} --no-tags
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_env_vars.outputs.tag_name }}
          release_name: ${{ steps.generate_env_vars.outputs.release_name }}
          body: |
            Description: TO BE DONE
            These are the outputs for the manually triggered build of commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          draft: false
          prerelease: false
  builds:
    needs: release
    if: ${{ needs.release.outputs.release_already_exists == 'false' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x64
            os: ubuntu-22.04
            artifact: linux-x64
            ext: zip
            content: application/zip
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      ZSTD_CLEVEL: 17
    steps:
      - uses: actions/checkout@v2
      - name: Create VERSION.TXT
        shell: bash
        run: |
          cat >VERSION.txt <<EOL
          build type: ${{ matrix.artifact }}
          build version string: ${{ inputs.version }}
          commit sha: ${{ github.sha }}
          commit url: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          EOL
      - name: Install meson
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install python3 python-is-python3 ninja-build
          pip3 install --user meson
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libncursesw5-dev libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev \
            libsdl2-mixer-dev libpulse-dev ccache gettext parallel
      - name: Build BNME
        if: runner.os == 'Linux'
        run: |
          meson setup --buildtype=release -Dversion=bnme-${{ inputs.version }} builddir
          meson compile -C builddir && strip builddir/cataclysm-tiles
      - name: Create release asset
        run: |
          python build-scripts/make_release.py
          mv bnme-bindist.zip bnme-${{ matrix.artifact }}-${{ inputs.version }}.zip
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: bnme-${{ matrix.artifact }}-${{ inputs.version }}.${{ matrix.ext }}
          asset_name: bnme-${{ matrix.artifact }}-${{ inputs.version }}.${{ matrix.ext }}
          asset_content_type: ${{ matrix.content }}
